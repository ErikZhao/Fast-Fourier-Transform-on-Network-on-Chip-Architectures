#include "pe.h"
#include <math.h>

using std::string;
using std::vector;

string::size_type queue_p11r11_temp; //*for PI queue size
string::size_type queue_p11r11;
string::size_type queue_p01r01_temp; //*for P1 queue size
string::size_type queue_p01r01;
string::size_type queue_p21r21_temp; //*for P2 queue size
string::size_type queue_p21r21;
string::size_type queue_p00r00_temp; //*for P3 queue size
string::size_type queue_p00r00;
string::size_type queue_p22r22_temp; //*for P4 queue size
string::size_type queue_p22r22;
string::size_type queue_p10r10_temp; //*for P5 queue size
string::size_type queue_p10r10;
string::size_type queue_p20r20_temp; //*for P6 queue size
string::size_type queue_p20r20;
string::size_type queue_p12r12_temp; //*for P7 queue size
string::size_type queue_p12r12;
string::size_type queue_p02r02_temp; //*for P8 queue size
string::size_type queue_p02r02;


w_type w1, w2, w3;  //*define w1, w2, and w3 for butterfly calculation

token_type x0, x1, x2, x3, x4, x5, x6, x7; //*define the initial 8 variables generated by PI

int PI_fire_time = 1; // *define the time used for counting
int count_P1 = 1;  // *define the number used for counting the time when each PE being used
int count_P2 = 1;
int count_P3 = 1; 
int count_P4 = 1;
int count_P5 = 1;
int count_P6 = 1;
int count_P7 = 1;
int count_P8 = 1;
int PO_fire_time = 1;

token_type x0i, x2i, x4i, x6i, y0o, y1o, y2o, y3o;  // *define tokens for butterfly calculation 
token_type x1i, x3i, x5i, x7i, y4o, y5o, y6o, y7o;  // *(in or out in terms of different PEs)
token_type y0i, y2i, y4i, y6i, z0o, z1o, z4o, z5o;
token_type y1i, y3i, y5i, y7i, z2o, z3o, z6o, z7o;
token_type z0i, z4i, X0o, X4o;
token_type z1i, z5i, X2o, X6o;
token_type z2i, z6i, X1o, X5o;
token_type z3i, z7i, X3o, X7o;

int round_start = 0;
int round_end = 0;
extern int i;
//////!!!


void PE_base::set_xy(int x, int y)
{
	assert((x_ == -1) && (y_ == -1)); // set once only
	assert((x != -1) && (y != -1)); // must use a legal location

	x_ = x;
	y_ = y;

	w1.w_Rp = sqrt(2.0000) / 2.0000;   //*set the value of w1, w2, and w3 for butterfly calculation
	w1.w_Ip = -sqrt(2.0000) / 2.0000;
	w2.w_Rp = 0.0000;
	w2.w_Ip = -1.0000;
	w3.w_Rp = -sqrt(2.0000) / 2.0000;
	w3.w_Ip = -sqrt(2.0000) / 2.0000;
}

void PE_base::read_input()
{
	packet_in_ = data_in.read();
}

void PE_base::write_output()
{
	if (out_queue_.empty())
	{
		data_out.write(packet());
	}
	else
	{
		data_out.write(out_queue_.front());
		out_queue_.pop_front();
	}
}

void PE_IO::execute()
{
	if (PI_fire_time <= 1)
		fire_PI();

	//int r = rand() % 100;
	//if (r < 12)
	//	fire_PI();

	// fire PO if the incoming packet is valid
	if ((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1))
		fire_PO();
}

void PE_IO::fire_PI()
{
	// PI generate 8 random value for FFT calculation
	x0.Rp = (rand() % 5000) / 1000.00; x0.Ip = (rand() % 5000) / 1000.00;
	x1.Rp = (rand() % 5000) / 1000.00; x1.Ip = (rand() % 5000) / 1000.00;
	x2.Rp = (rand() % 5000) / 1000.00; x2.Ip = (rand() % 5000) / 1000.00;
	x3.Rp = (rand() % 5000) / 1000.00; x3.Ip = (rand() % 5000) / 1000.00;
	x4.Rp = (rand() % 5000) / 1000.00; x4.Ip = (rand() % 5000) / 1000.00;
	x5.Rp = (rand() % 5000) / 1000.00; x5.Ip = (rand() % 5000) / 1000.00;
	x6.Rp = (rand() % 5000) / 1000.00; x6.Ip = (rand() % 5000) / 1000.00;
	x7.Rp = (rand() % 5000) / 1000.00; x7.Ip = (rand() % 5000) / 1000.00;

	//*send each packet to its corresponding PE
	packet p0(x_, y_, 0, 1, x0);
	printf("Round %d:PI: send x0=%.4f+%.4fi to (%d,%d)\n",
		PI_fire_time, x0.Rp, x0.Ip, p0.dest_x, p0.dest_y);
	packet p1(x_, y_, 2, 1, x1);
	printf("Round %d:PI: send x1=%.4f+%.4fi to (%d,%d)\n",
		PI_fire_time, x1.Rp, x1.Ip, p1.dest_x, p1.dest_y);
	packet p2(x_, y_, 0, 1, x2);
	printf("Round %d:PI: send x2=%.4f+%.4fi to (%d,%d)\n",
		PI_fire_time, x2.Rp, x2.Ip, p2.dest_x, p2.dest_y);
	packet p3(x_, y_, 2, 1, x3);
	printf("Round %d:PI: send x3=%.4f+%.4fi to (%d,%d)\n",
		PI_fire_time, x3.Rp, x3.Ip, p3.dest_x, p3.dest_y);
	packet p4(x_, y_, 0, 1, x4);
	printf("Round %d:PI: send x4=%.4f+%.4fi to (%d,%d)\n",
		PI_fire_time, x4.Rp, x4.Ip, p4.dest_x, p4.dest_y);
	packet p5(x_, y_, 2, 1, x5);
	printf("Round %d:PI: send x5=%.4f+%.4fi to (%d,%d)\n",
		PI_fire_time, x5.Rp, x5.Ip, p5.dest_x, p5.dest_y);
	packet p6(x_, y_, 0, 1, x6);
	printf("Round %d:PI: send x6=%.4f+%.4fi to (%d,%d)\n",
		PI_fire_time, x6.Rp, x6.Ip, p6.dest_x, p6.dest_y);
	packet p7(x_, y_, 2, 1, x7);
	printf("Round %d:PI: send x7=%.4f+%.4fi to (%d,%d)\n",
		PI_fire_time, x7.Rp, x7.Ip, p7.dest_x, p7.dest_y);

	out_queue_.push_back(p0);
	out_queue_.push_back(p1);
	out_queue_.push_back(p2);
	out_queue_.push_back(p3);
	out_queue_.push_back(p4);
	out_queue_.push_back(p5);
	out_queue_.push_back(p6);
	out_queue_.push_back(p7);

	queue_p11r11_temp = out_queue_.size();
	if (queue_p11r11 < queue_p11r11_temp)
		queue_p11r11 = queue_p11r11_temp;

	round_start = round_start + i;

	PI_fire_time++;
}

void PE_IO::fire_PO()    //PO is responsible for displaying
{
	assert((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1));

	//PO displays all results (X(0) to X(7)) received from each PE
	if (PO_fire_time % 8 == 1)
	{
		printf("PO: receive X(0)= %.4f+%.4fi from (%d,%d)\n",
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y);
	}
	if (PO_fire_time % 8 == 2)
	{
		printf("PO: receive X(4)= %.4f+%.4fi from (%d,%d)\n",
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y);
	}
	if (PO_fire_time % 8 == 3)
	{
		printf("PO: receive X(2)= %.4f+%.4fi from (%d,%d)\n",
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y);
	}
	if (PO_fire_time % 8 == 4)
	{
		printf("PO: receive X(6)= %.4f+%.4fi from (%d,%d)\n",
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y);
	}
	if (PO_fire_time % 8 == 5)
	{
		printf("PO: receive X(1)= %.4f+%.4fi from (%d,%d)\n",
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y);
	}
	if (PO_fire_time % 8 == 6)
	{
		printf("PO: receive X(5)= %.4f+%.4fi from (%d,%d)\n",
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y);
	}
	if (PO_fire_time % 8 == 7)
	{
		printf("PO: receive X(3)= %.4f+%.4fi from (%d,%d)\n",
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y);
	}
	if (PO_fire_time % 8 == 0)
	{
		printf("PO: receive X(7)= %.4f+%.4fi from (%d,%d)\n",
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y);
	}

	round_end = round_end + i;

	PO_fire_time++;
}

void PE_P1::execute()
{
	// fire the actor if the incoming packet is valid
	if ((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1))
		fire();
}

// *each PE receives packets according to the order that each token coming into it
// *Do the butterfly calculation and send packets to corresponding PEs
void PE_P1::fire()
{
	assert((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1));

	if (count_P1 % 4 == 1)
	{
		x0i.Rp = packet_in_.token.Rp;
		x0i.Ip = packet_in_.token.Ip;
		printf("P1(%d,%d): receive x0 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);
	}
	if (count_P1 % 4 == 2)
	{
		x2i.Rp = packet_in_.token.Rp;
		x2i.Ip = packet_in_.token.Ip;
		printf("P1(%d,%d): receive x2 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);
	}
	if (count_P1 % 4 == 3)
	{
		x4i.Rp = packet_in_.token.Rp;
		x4i.Ip = packet_in_.token.Ip;
		printf("P1(%d,%d): receive x4 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);	
	}
	if (count_P1 % 4 == 0)
	{
		x6i.Rp = packet_in_.token.Rp;
		x6i.Ip = packet_in_.token.Ip;
		printf("P1(%d,%d): receive x6 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);
		
		y0o.Rp = x0i.Rp + x4i.Rp; y0o.Ip = x0i.Ip + x4i.Ip;
		y1o.Rp = x0i.Rp - x4i.Rp; y1o.Ip = x0i.Ip - x4i.Ip;
		y2o.Rp = x2i.Rp + x6i.Rp; y2o.Ip = x2i.Ip + x6i.Ip;
		y3o.Rp = x2i.Rp - x6i.Rp; y3o.Ip = x2i.Ip - x6i.Ip;

		packet py0(x_, y_, 0, 0, y0o);
		printf("P1 send y0=%.4f+%.4fi to (%d,%d)\n",
			py0.token.Rp, py0.token.Ip, 0, 0);
		out_queue_.push_back(py0);
		packet py1(x_, y_, 2, 2, y1o);
		printf("P1 send y1=%.4f+%.4fi to (%d,%d)\n",
			py1.token.Rp, py1.token.Ip, 2, 2);
		out_queue_.push_back(py1);
		packet py2(x_, y_, 0, 0, y2o);
		printf("P1 send y2=%.4f+%.4fi to (%d,%d)\n",
			py2.token.Rp, py2.token.Ip, 0, 0);
		out_queue_.push_back(py2);
		packet py3(x_, y_, 2, 2, y3o);
		printf("P1 send y3=%.4f+%.4fi to (%d,%d)\n",
			py3.token.Rp, py3.token.Ip, 2, 2);
		out_queue_.push_back(py3);

		queue_p01r01_temp = out_queue_.size();
		if (queue_p01r01 < queue_p01r01_temp)
			queue_p01r01 = queue_p01r01_temp;
	}
	count_P1++;
}

void PE_P2::execute()
{
	// fire the actor if the incoming packet is valid
	if ((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1))
		fire();
}

void PE_P2::fire()
{
	assert((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1));

	if (count_P2 % 4 == 1)
	{
		x1i.Rp = packet_in_.token.Rp;
		x1i.Ip = packet_in_.token.Ip;
		printf("P2(%d,%d): receive x1 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);
	}
	if (count_P2 % 4 == 2)
	{
		x3i.Rp = packet_in_.token.Rp;
		x3i.Ip = packet_in_.token.Ip;
		printf("P2(%d,%d): receive x3 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);
	}
	if (count_P2 % 4 == 3)
	{
		x5i.Rp = packet_in_.token.Rp;
		x5i.Ip = packet_in_.token.Ip;
		printf("P2(%d,%d): receive x5 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);
	}
	if (count_P2 % 4 == 0)
	{
		x7i.Rp = packet_in_.token.Rp;
		x7i.Ip = packet_in_.token.Ip;
		printf("P2(%d,%d): receive x7 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);

		y4o.Rp = x1i.Rp + x5i.Rp; y4o.Ip = x1i.Ip + x5i.Ip;
		y5o.Rp = x1i.Rp - x5i.Rp; y4o.Ip = x1i.Ip - x5i.Ip;
		y6o.Rp = x3i.Rp + x7i.Rp; y6o.Ip = x3i.Ip + x7i.Ip;
		y7o.Rp = x3i.Rp - x7i.Rp; y6o.Ip = x3i.Ip - x7i.Ip;

		packet py4(x_, y_, 0, 0, y4o);
		printf("P2 send y4=%.4f+%.4fi to (%d,%d)\n",
			py4.token.Rp, py4.token.Ip, 0, 0);
		out_queue_.push_back(py4);
		packet py5(x_, y_, 2, 2, y5o);
		printf("P2 send y1=%.4f+%.4fi to (%d,%d)\n",
			py5.token.Rp, py5.token.Ip, 2, 2);
		out_queue_.push_back(py5);
		packet py6(x_, y_, 0, 0, y6o);
		printf("P2 send y6=%.4f+%.4fi to (%d,%d)\n",
			py6.token.Rp, py6.token.Ip, 0, 0);
		out_queue_.push_back(py6);
		packet py7(x_, y_, 2, 2, y7o);
		printf("P2 send y7=%.4f+%.4fi to (%d,%d)\n",
			py7.token.Rp, py7.token.Ip, 2, 2);
		out_queue_.push_back(py7);

		queue_p21r21_temp = out_queue_.size();
		if (queue_p21r21 < queue_p21r21_temp)
			queue_p21r21 = queue_p21r21_temp;
	}
	count_P2++;
}

void PE_P3::execute()
{
	// fire the actor if the incoming packet is valid
	if ((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1))
		fire();
}

void PE_P3::fire()
{
	assert((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1));

	if (count_P3 % 4 == 1)
	{
		y0i.Rp = packet_in_.token.Rp;
		y0i.Ip = packet_in_.token.Ip;
		printf("P3(%d,%d): receive y0 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);
	}
	if (count_P3 % 4 == 2)
	{
		y4i.Rp = packet_in_.token.Rp;
		y4i.Ip = packet_in_.token.Ip;
		printf("P3(%d,%d): receive y4 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);
	}
	if (count_P3 % 4 == 3)
	{
		y2i.Rp = packet_in_.token.Rp;
		y2i.Ip = packet_in_.token.Ip;
		printf("P3(%d,%d): receive y2 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);
	}
	if (count_P3 % 4 == 0)
	{
		y6i.Rp = packet_in_.token.Rp;
		y6i.Ip = packet_in_.token.Ip;
		printf("P3(%d,%d): receive y6 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);

		z0o.Rp = y0i.Rp + y2i.Rp; z0o.Ip = y0i.Ip + y2i.Ip;
		z1o.Rp = y0i.Rp - y2i.Rp; z1o.Ip = y0i.Ip - y2i.Ip;
		z4o.Rp = y4i.Rp + y6i.Rp; z4o.Ip = y4i.Ip + y6i.Ip;
		z5o.Rp = y4i.Rp - y6i.Rp; z5o.Ip = y4i.Ip - y6i.Ip;

		packet pz0(x_, y_, 1, 0, z0o);
		printf("P3 send z0=%.4f+%.4fi to (%d,%d)\n",
			pz0.token.Rp, pz0.token.Ip, 1, 0);
		out_queue_.push_back(pz0);
		packet pz1(x_, y_, 2, 0, z1o);
		printf("P3 send z1=%.4f+%.4fi to (%d,%d)\n",
			pz1.token.Rp, pz1.token.Ip, 2, 0);
		out_queue_.push_back(pz1);
		packet pz4(x_, y_, 1, 0, z4o);
		printf("P3 send z4=%.4f+%.4fi to (%d,%d)\n",
			pz4.token.Rp, pz4.token.Ip, 1, 0);
		out_queue_.push_back(pz4);
		packet pz5(x_, y_, 2, 0, z5o);
		printf("P3 send z5=%.4f+%.4fi to (%d,%d)\n",
			pz5.token.Rp, pz5.token.Ip, 2, 0);
		out_queue_.push_back(pz5);

		queue_p00r00_temp = out_queue_.size();
		if (queue_p00r00 < queue_p00r00_temp)
			queue_p00r00 = queue_p00r00_temp;
	}
	count_P3++;
}

void PE_P4::execute()
{
	// fire the actor if the incoming packet is valid
	if ((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1))
		fire();
}

void PE_P4::fire()
{
	assert((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1));

	if (count_P4 % 4 == 1)
	{
		y1i.Rp = packet_in_.token.Rp;
		y1i.Ip = packet_in_.token.Ip;
		printf("P4(%d,%d): receive y1 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);
	}
	if (count_P4 % 4 == 2)
	{
		y5i.Rp = packet_in_.token.Rp;
		y5i.Ip = packet_in_.token.Ip;
		printf("P4(%d,%d): receive y5 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);
	}
	if (count_P4 % 4 == 3)
	{
		y3i.Rp = packet_in_.token.Rp;
		y3i.Ip = packet_in_.token.Ip;
		printf("P4(%d,%d): receive y3 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);
	}
	if (count_P4 % 4 == 0)
	{
		y7i.Rp = packet_in_.token.Rp;
		y7i.Ip = packet_in_.token.Ip;
		printf("P4(%d,%d): receive y7 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);

		z2o.Rp = y1i.Rp + (y3i.Rp*w2.w_Rp + y3i.Ip*w2.w_Ip); z2o.Ip = y1i.Ip + (y3i.Rp*w2.w_Ip + y3i.Ip*w2.w_Rp);
		z3o.Rp = y1i.Rp - (y3i.Rp*w2.w_Rp + y3i.Ip*w2.w_Ip); z3o.Ip = y1i.Ip - (y3i.Rp*w2.w_Ip + y3i.Ip*w2.w_Rp);
		z6o.Rp = y5i.Rp + (y7i.Rp*w2.w_Rp + y7i.Ip*w2.w_Ip); z6o.Ip = y5i.Ip + (y7i.Rp*w2.w_Ip + y7i.Ip*w2.w_Rp);
		z7o.Rp = y5i.Rp - (y7i.Rp*w2.w_Rp + y7i.Ip*w2.w_Ip); z7o.Ip = y5i.Ip - (y7i.Rp*w2.w_Ip + y7i.Ip*w2.w_Rp);

		packet pz2(x_, y_, 1, 2, z2o);
		printf("P4 send z2=%.4f+%.4fi to (%d,%d)\n",
			pz2.token.Rp, pz2.token.Ip, 1, 2);
		out_queue_.push_back(pz2);
		packet pz3(x_, y_, 0, 2, z3o);
		printf("P4 send z3=%.4f+%.4fi to (%d,%d)\n",
			pz3.token.Rp, pz3.token.Ip, 0, 2);
		out_queue_.push_back(pz3);
		packet pz6(x_, y_, 1, 2, z6o);
		printf("P4 send z6=%.4f+%.4fi to (%d,%d)\n",
			pz6.token.Rp, pz6.token.Ip, 1, 2);
		out_queue_.push_back(pz6);
		packet pz7(x_, y_, 0, 2, z7o);
		printf("P4 send z7=%.4f+%.4fi to (%d,%d)\n",
			pz7.token.Rp, pz7.token.Ip, 0, 2);
		out_queue_.push_back(pz7);

		queue_p22r22_temp = out_queue_.size();
		if (queue_p22r22 < queue_p22r22_temp)
			queue_p22r22 = queue_p22r22_temp;
	}
	count_P4++;
}

void PE_P5::execute()
{
	// fire the actor if the incoming packet is valid
	if ((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1))
		fire();
}

void PE_P5::fire()
{
	assert((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1));

	if (count_P5 % 2 == 1)
	{
		z0i.Rp = packet_in_.token.Rp;
		z0i.Ip = packet_in_.token.Ip;
		printf("P5(%d,%d): receive z0 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);
	}
	if (count_P5 % 2 == 0)
	{
		z4i.Rp = packet_in_.token.Rp;
		z4i.Ip = packet_in_.token.Ip;
		printf("P5(%d,%d): receive z4 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);

		X0o.Rp = z0i.Rp + z4i.Rp; X0o.Ip = z0i.Ip + z4i.Ip;
		X4o.Rp = z0i.Rp - z4i.Rp; X4o.Ip = z0i.Ip - z4i.Ip;

		packet pX0(x_, y_, 1, 1, X0o);
		printf("P5 send X0=%.4f+%.4fi to (%d,%d)\n",
			pX0.token.Rp, pX0.token.Ip, 1, 1);
		out_queue_.push_back(pX0);
		packet pX4(x_, y_, 1, 1, X0o);
		printf("P5 send X4=%.4f+%.4fi to (%d,%d)\n",
			pX0.token.Rp, pX0.token.Ip, 1, 1);
		out_queue_.push_back(pX0);

		queue_p10r10_temp = out_queue_.size();
		if (queue_p10r10 < queue_p10r10_temp)
			queue_p10r10 = queue_p10r10_temp;
	}
	count_P5++;
}

void PE_P6::execute()
{
	// fire the actor if the incoming packet is valid
	if ((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1))
		fire();
}

void PE_P6::fire()
{
	assert((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1));

	if (count_P6 % 2 == 1)
	{
		z1i.Rp = packet_in_.token.Rp;
		z1i.Ip = packet_in_.token.Ip;
		printf("P6(%d,%d): receive z1 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);
	}
	if (count_P6 % 2 == 0)
	{
		z5i.Rp = packet_in_.token.Rp;
		z5i.Ip = packet_in_.token.Ip;
		printf("P6(%d,%d): receive z5 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);

		X2o.Rp = z1i.Rp + (z5i.Rp*w2.w_Rp + z5i.Ip*w2.w_Ip); X2o.Ip = z1i.Ip + (z5i.Rp*w2.w_Ip + z5i.Ip*w2.w_Rp);
		X6o.Rp = z1i.Rp - (z5i.Rp*w2.w_Rp + z5i.Ip*w2.w_Ip); X6o.Ip = z1i.Ip - (z5i.Rp*w2.w_Ip + z5i.Ip*w2.w_Rp);

		packet pX2(x_, y_, 1, 1, X2o);
		printf("P6 send X2=%.4f+%.4fi to (%d,%d)\n",
			pX2.token.Rp, pX2.token.Ip, 1, 1);
		out_queue_.push_back(pX2);
		packet pX6(x_, y_, 1, 1, X6o);
		printf("P6 send X6=%.4f+%.4fi to (%d,%d)\n",
			pX6.token.Rp, pX6.token.Ip, 1, 1);
		out_queue_.push_back(pX6);

		queue_p20r20_temp = out_queue_.size();
		if (queue_p20r20 < queue_p20r20_temp)
			queue_p20r20 = queue_p20r20_temp;
	}
	count_P6++;
}

void PE_P7::execute()
{
	// fire the actor if the incoming packet is valid
	if ((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1))
		fire();
}

void PE_P7::fire()
{
	assert((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1));

	if (count_P7 % 2 == 1)
	{
		z2i.Rp = packet_in_.token.Rp;
		z2i.Ip = packet_in_.token.Ip;
		printf("P7(%d,%d): receive z2 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);
	}
	if (count_P7 % 2 == 0)
	{
		z6i.Rp = packet_in_.token.Rp;
		z6i.Ip = packet_in_.token.Ip;
		printf("P7(%d,%d): receive z6 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);

		X1o.Rp = z2i.Rp + (z6i.Rp*w1.w_Rp + z6i.Ip*w1.w_Ip); X1o.Ip = z2i.Ip + (z6i.Rp*w1.w_Ip + z6i.Ip*w1.w_Rp);
		X5o.Rp = z2i.Rp - (z6i.Rp*w1.w_Rp + z6i.Ip*w1.w_Ip); X5o.Ip = z2i.Ip - (z6i.Rp*w1.w_Ip + z6i.Ip*w1.w_Rp);

		packet pX1(x_, y_, 1, 1, X1o);
		printf("P7 send X1=%.4f+%.4fi to (%d,%d)\n",
			pX1.token.Rp, pX1.token.Ip, 1, 1);
		out_queue_.push_back(pX1);
		packet pX5(x_, y_, 1, 1, X5o);
		printf("P7 send X5=%.4f+%.4fi to (%d,%d)\n",
			pX5.token.Rp, pX5.token.Ip, 1, 1);
		out_queue_.push_back(pX5);

		queue_p02r02_temp = out_queue_.size();
		if (queue_p12r12 < queue_p12r12_temp)
			queue_p12r12 = queue_p12r12_temp;
	}
	count_P7++;
}

void PE_P8::execute()
{
	// fire the actor if the incoming packet is valid
	if ((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1))
		fire();
}

void PE_P8::fire()
{
	assert((packet_in_.src_x != -1)
		&& (packet_in_.src_y != -1));

	if (count_P8 % 2 == 1)
	{
		z3i.Rp = packet_in_.token.Rp;
		z3i.Ip = packet_in_.token.Ip;
		printf("P8(%d,%d): receive z3 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);
	}
	if (count_P8 % 2 == 0)
	{
		z7i.Rp = packet_in_.token.Rp;
		z7i.Ip = packet_in_.token.Ip;
		printf("P8(%d,%d): receive z7 %.4f+%.4fi from (%d,%d)\n",
			x_, y_,
			packet_in_.token.Rp, packet_in_.token.Ip, packet_in_.src_x, packet_in_.src_y
			);

		X3o.Rp = z3i.Rp + (z7i.Rp*w3.w_Rp + z7i.Ip*w3.w_Ip); X3o.Ip = z3i.Ip + (z7i.Rp*w3.w_Ip + z7i.Ip*w3.w_Rp);
		X7o.Rp = z3i.Rp - (z7i.Rp*w3.w_Rp + z7i.Ip*w3.w_Ip); X7o.Ip = z3i.Ip - (z7i.Rp*w3.w_Ip + z7i.Ip*w3.w_Rp);

		packet pX3(x_, y_, 1, 1, X3o);
		printf("P8 send X3=%.4f+%.4fi to (%d,%d)\n",
			pX3.token.Rp, pX3.token.Ip, 1, 1);
		out_queue_.push_back(pX3);
		packet pX7(x_, y_, 1, 1, X7o);
		printf("P8 send X7=%.4f+%.4fi to (%d,%d)\n",
			pX7.token.Rp, pX7.token.Ip, 1, 1);
		out_queue_.push_back(pX7);

		queue_p02r02_temp = out_queue_.size();
		if (queue_p02r02 < queue_p02r02_temp)
			queue_p02r02 = queue_p02r02_temp;
	}
	count_P8++;

}
